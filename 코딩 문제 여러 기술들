N=123 -> 1 + 2 + 3
def solution(n):
  answer = 0
  for num in str(n):
    answer += int(num)
  return answer


12345 -> [5,4,3,2,1]
def solution(n):
  answer = [int(i) for i in reversed(str(n))]
  return answer


n이 어떤 int(x)의 제곱인지 -> true: (x+1)**2 Flase: -1
def solution(n):
  answer = 0
  num = n **0.5
  if num == int(int):
    answer = (num+1)**2
  else:
    answer = -1
  return answer


118372 -> 873211
def solution(n):
  return int(''.join(sorted(str(n),reverse=True)))  -> ''.join 리스트를 하나의 문자열로 조인


x % x자리수 합 == 0 -> True else: False
def solution(x):
  answer = True
  a = sum(int(i) for i in str(x))
  if x % a == 0:
    return answer
  else:
    return False

프러그래머스 - 콜라츠 추측
num == 1 -> 0  | 조건: 입력된 수가 짝수면 num/2 홀수면 (num*3)+1 -> 1 이 나올때까지 반복. 주어진수가 1이면 0을 500번 반복까지 1이 안되면 -1을 반환
def solution(num):
  answer = 0
  if num == 1:
    return 0
  while True:
        num = num/2 if num % 2 == 0 else(num*3)+1
        answer += 1
        if num == 1:
            return answer
        elif answer == 500:
            return -1
    return answer

12+3, 3+12 중 큰거
def solution (a,b):
  return max(int(str(a)+str(b)),2*a*b)

if n % 2 이면 숫자들 sum 짝수면 제곱들의 합
def solution(n):
    answer = 0
    if n % 2:
        return sum(range(1,n+1,2))
    return sum([i*i for i in range(2,n+1,2)])  -> range(2,n+1,3) 하면 3은 증가폭

입력 ineq : > or <  이고 eq : ! or 이고 숫자 n, m 이 주어진다. 조건을 만족하면 return 아니면 return 0
def solution(ineq, eq, n, m):
    return int(eval(str(n)+ineq+eq.replace('!','')+str(m)))
###### eval() : 문자열로 표현된 수학식을 계산   |  eq.replace('!",''): 대체

boolen일때
if flag == True:

문자열에서 뒤에서부터 n번째부터 시작
my_string[-n:]

list[1,2,3]내에 숫자들을 다 곱해서 더하기
answer = 1
for i in num_list:
  answer *= i

list의 n번째 부터 끝까지
list[n-1:]
n번째 까지
list[:n]

list안에서 "w" 는 +1 "s"는 -1 "d"는 +10 "a"는 -10
방법 1)
def solution(n, control):
    answer = n
    for i in control:
        if  i == "w":
            answer += 1
        if  i == "s":
            answer -= 1
        if  i == "d":
            answer += 10
        if  i == "a":
            answer -= 10
    return answer
방법 2)
def solution(control):
  answer = ''
  dic = {1:'w', -1:'s', 10:'d', -10:'a'}

  for idx, val in enumerate(control):
    if idx != len(control)-1:
      answer += dic[control[idx+1] - control[idx]]
  return answer

Given: absolutes=[1,2,3], signs=[ture, false, true]
def solution(absolutes, signs):
  answer = 0
  for i in range (len(Absolutes)):
    if sings[i]:                        => true면 더하고 false면 빼라
      answer += absolutes[i]
    else:
      answer -= aboslutes[i]
  return answer


Given: 'pPyYyyy'  ->  p&P 와 y&Y의 갯수 값으면 true 아니면 false
import collections   -> import collections as Collect 
def solution(s):
  s = s.lower()
  count = collections.Counter(s)
  if count['p'] == count ['y']:
    return True
  return False









