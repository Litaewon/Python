복잡도 (Complexitiy) -> 낮을 수록 좋은 알고리즘
- 시간 복잡도: 수행 시간 분석
- 공간 복잡도: 메모리 사용량 분석
n = 10
a = [0] * n
append() / sort(reverse=Ture) / reverse() / insert() / count() / remove()
튜플은 특정 원소 변경 불가능 - 메모리 효율적, 서로 다른 성질의 데이터를 묶어서 관리할 때
data = dict()
data['사과'] = 'Apple' 
b =  {
  '홍길동' : 97,
  '이순신' : 98
  }
key_list = list(b,keys())
print(b['이순신'])

data = set([1, 2, 3])
.add / .update / .remove

a = int(input())
data = list(map(int,input().split())
a, b, c = map(int,input().split())  -> 최대 3개의 변수

print( 5, end=" ")
print("정답은" + str(answer) + "입니다.") -> 특정한 
import sys
data = sys.stdin.readline() -> sys.stdin.readline() -> 엔터가 줄 바꿈 기호로 입력되므로 rstrip() 사용.
print(f'{data}')

Block (indent 들여쓰기) 




