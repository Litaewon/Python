1. 사칙연산 리스트를 붙인다, 뺀다
a = [1,2,3]
b = ["hello"]
print(a+b)
# [1,2,3,"helllo"]

2. 리스트 인덱싱 1 (리스트 검색, 접근)
a = [1, 2, 3]
print(f'a[o] : {b} ')
# 1
print(f'a[-1] : {b} ')
# 3

3. 리스트 인덱싱 2 (리스트 값 수정)
b = [222, 333, 444]
b [0] = 10  # b 리스트 첫번째 값을 0으로 바꿈

4. 리스트 슬라이싱: 리스트 자르기
a = [1, 2, 3, 4]
a[1:3]      # 리스트 a에서 index 1번주터 2번 까지를 잘라서 리스트로 반환해라, 즉 a[시작점:끝점+1]
a[:] # 맨 앞부터 맨 뒤 끝까지
a[:3]  # 맨 앞에서 특정 부분 까지
a[:w], a[W:]  # 리스트 반으로 나누기
a[-3:-1]   # [ 2, 3]

4. 파이썬 리스트의 길이, 삭제  len 함수 del 함수
c = [1, 2, 3, 4, 5, 6, 7]
print(f'len(c) : {c}')
# c

del 함수. 특정 위치 삭제
c = [1, 2, 3]
del(c[1])
print(c)
# [2, 3]

5. 리스트 메서드 append, insert, remove, pop, extend
list.append(x): 리스트에 값 추가
a = [1, 2, 3]
a.append('k')
print(a)
# [1, 2, 3, 'k']

a.insert(a, b): 특정 위치에 값 추가
c = [1, 2, 3]
c.insert(0, 'k')
print(c)
# ['k', 1, 2, 3]

list.remove(x): 리스트에서 특정 값 제거
c = [1, 2, 3]
c.remove(2)
print(c)
# [1, 3]

list.pop(): 리스트 맨 마지막 값 반환 후 삭제
a = [1, 2, 3]
b = a.pop()
print(b)
# 3
c = a.pop()
print(c)
# 2
d = a.pop()
print(d)
# 1

list.extend(list2): 리스트에 다른 리스트2 연결      < - > list 3 = list 1 + list 2 이렇게 받아야 하지만. 이거는 그냥 a에 이어 붙임
a = [1, 2]
b = [2, 3]
a.extend(b)
print(a)
# [1, 2, 2, 3]

6. 파이썬 메서드 copy, reverse, sort, count, index, clear
list copy() : 리스트 복사
a = [1 ,2, 3]
b = a.copy()
print(a)
print(b)
print(id(a))
print(id(b))
# [1, 2, 3]
[1, 2, 3]
46587560 -> 주소값이 다른걸 볼 수 있음
47527752 -> 주소값이 다른걸 볼 수 있음

list.reverse() : 리스트 뒤집기
a = [1, 2, 3]
a.reverse()
print(a)
#[3, 2, 1]

list.sort() : 리스트 정렬
a = [2, 3, 1]
b = [b, c, a]
c = [2, 3, 1, 'a', 'b']
a.sort()
print(a)
print(b)
print(c)
# [1, 2, 3]
[a, b, c]
c는 정령 안됨. 불가능

list.count(x) : 리스트 값 x의 개수 세기
a = ['a', '1', 'b', '1']
print(a.count('1'))
# 2

list.index(x) : 리스트 값 x의 위치(index) 값 변환
a = ['1', '2', '3', '4', '5']
print(a.index('3')
# 4

list.clear() : 리스트에 저장된 모든 값 삭제
a = [1, 2, 3]
a.clear
print(a)
# []

7. 파이썬 리스트 깊은 복사과 얕은 복사에 대해서
깊은 복사: 복사를 해서 각각 독립적인 리스트   / a가 안바뀐다    즉, 독립          b=[1,2,3]   d=c.copy(), f=c[:]
얕은 복사: 실제로는 같은 리스트를 가리키는 것   / a가 바뀐다   즉, 이어져 있음     b=[1,2,3]  b[2] = 5
-------------------------------------------------------------------------------------------------------------------------------------------------
1.리스트를 stack으로 사용해보기    / stack자료구조 = LIFO 구조, last in, first out. 즉 마지막에 들어온 값이 제일 먼저 나간다.
a = ['1', '2', '3']
a.append(10)
a.pop()

2. 파이썬 리스트를 특정 값 확인 (in, not in)
s = [ 1, 2, 3, 4, 5]
print('a' in s)
print('1' in s)
# False
True

if 'a' in s:
  print('...1')
else:
  print('...2')
# ...2

3.파이썬 리스트 생성 range 이용 (컴프리헨션)  range(a,b)는 a 부터 b-1 다 가져오는 것
a = list()

for x in range(0, 10):
    if x % 2 == 0:
        a.append(x)
print(a)

리스트 컴프리헨션: 위 방법을 그냥 리스트에 설정하는 방법
a = [x for x in range(0, 10) if x % 2 ==0 ]
print(a)

4. 파이썬 리스트 중복 값 제거 방법
a = ['a', 'b', 'c', 'c', 1, 1, 2, 3, 4]
b = set(a)
print(b)
# ['a', 'b', 'c', 1, 2, 3, 4]








